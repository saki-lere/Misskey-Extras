/// @ 0.12.4
### {
  name: "Note MFM Toggle (AS0.12.4ç‰ˆ)"
  version: "1.1.0"
  author:  "@salano_ym (Original: volpeon, Johann150)"
  description: "MFM can be toggled for specific notes from the three dot menu of the note."
  permission: []
  config: {}
}

:: Util {
  @pipe(els) {
    let len = els.len

    if (len == 0) {
      return null
    }

    let result = els[0]

    @run(i) {
      if (i >= len) {
        return result
      }

      let el = els[i]
      result = el(result)
      
      run(i + 1)
    }

    run(1)
  }

  @merge(obj1, obj2) {
    let o = Obj:copy(obj1)
    let kvs = Obj:kvs(obj2)
    let len = kvs.len
  
    @step(i) {
      if (i >= len) {
        return o
      }

      let kv = kvs[i]
      Obj:set(o, kv[0], kv[1])

      step(i + 1)
    }

    step(0)
  }
}

:: Stream {
  @resultOk(read, stream) {
    {
      ok: true
      read: read
      stream: stream
    }
  }

  @resultFail() {
    {
      ok: false
    }
  }

  @mk(str, pos) {
    {
      str: str
      pos: pos
    }
  }

  @of(str) {
    mk(str, 0)
  }

  @read(stream, length) {
    let remainingLength = (stream.str.len - stream.pos)

    if (length > remainingLength) {
      return resultFail()
    }

    let newPos = (stream.pos + length)

    resultOk(stream.str.slice(stream.pos, newPos), mk(stream.str, newPos))
  }
}

:: Parser {
  // Constructors

  @resultOk(stream, value) {
    {
      ok: true
      stream: stream
      value: value
    }
  }

  @resultFail(stream, error) {
    {
      ok: false
      stream: stream
      error: error
    }
  }

  @mk(parse) {
    {
      parse: parse
    }
  }
  
  @ok(value) {
    mk(@(stream) { resultOk(stream, value) })
  }
  
  @fail(error) {
    mk(@(stream) { resultFail(stream, error) })
  }

  @anyToken(length) {
    mk(@(stream) {
      let result = Stream:read(stream, length)

      if result.ok {
        return resultOk(result.stream, result.read)
      }

      resultFail(stream, "End of input")
    })
  }

  @eof() {
    mk(@(stream) {
      let result = Stream:read(stream, 1)

      if result.ok {
        return resultFail(stream, "Expected end of input")
      }

      resultOk(stream, true)
    })
  }

  // Basic operators

  @then(cont) {
    @(parser) {
      mk(@(stream) {
        let result = parser.parse(stream)

        if result.ok {
          let parserCont = cont(result.value)
          return parserCont.parse(result.stream)
        }
    
        result
      })
    }
  }

  @map(fn) {
    @(parser) {
      mk(@(stream) {
        let result = parser.parse(stream)

        if result.ok {
          return resultOk(result.stream, fn(result.value))
        }
    
        result
      })
    }
  }

  // Generic combinators
  
  @satisfy(condition, description) {
    @(parser) {
      mk(@(stream) {
        let result = parser.parse(stream)
        
        if result.ok {
          if condition(result.value) {
            return resultOk(result.stream, result.value)
          }
          
          return resultFail(stream, description)
        }

        result
      })
    }
  }

  @oneOf(parsers) {
    let len = parsers.len

    mk(@(stream) {
      let errors = []

      @run(i) {
        if (i >= len) {
          return resultFail(stream, `All parsers failed: {errors.join("; ")}`)
        }

        let parser = parsers[i]
        let result = parser.parse(stream)
        
        if result.ok {
          return result
        }

        errors.push(`({i}){result.error}`)
        
        run((i + 1))
      }

      run(0)
    })
  }

  @many(parser) {
    @run(matches) {
      mk(@(stream) {
        let result = parser.parse(stream)
        
        if result.ok {
          let step = run(matches.concat([result.value]))
          return step.parse(result.stream)
        }

        resultOk(result.stream, matches)
      })
    }

    run([])
  }

  @many1(parser) {
    Util:pipe([
      many(parser)
      satisfy(@(value) {
        if (value.len == 0) { false } else { true }
      }, "Expected at least one match")
    ])
  }

  // Specialized string parsers

  @token(str) {
    Util:pipe([
      anyToken(str.len)
      satisfy(@(value) {
        if (value == str) { true } else { false }
      }, `Expected '{str}'`)
    ])
  }

  @takeWhile(condition) {
    mk(@(stream) {
      let matches = []

      @run(s) {
        let result = Stream:read(s, 1)

        if result.ok {
          if condition(result.read) {
            matches.push(result.read)
            return run(result.stream)
          }
        }

        resultOk(s, matches.join())
      }

      run(stream)
    })
  }

  @takeWhile1(condition) {
    Util:pipe([
      takeWhile(condition)
      satisfy(@(value) {
        if (value.len == 0) { false } else { true }
      }, "Expected at least one match")
    ])
  }
}

:: ParserStore {
  @mk(parser) {
    {
      parser: parser
    }
  }

  @create() {
    mk(Parser:ok({}))
  }

  @merge(parserFn) {
    @(store) {
      mk(
        Util:pipe([
          store.parser
          Parser:then(@(value1) {
            let parser = parserFn(value1)
            Util:pipe([
              parser
              Parser:map(@(value2) {
                Util:merge(value1, value2)
              })
            ])
          })
        ])
      )
    }
  }

  @skip(parserFn) {
    @(store) {
      mk(
        Util:pipe([
          store.parser
          Parser:then(@(value) {
            let parser = parserFn(value)
            Util:pipe([
              parser
              Parser:map(@() { value })
            ])
          })
        ])
      )
    }
  }

  @store(key, parserFn) {
    merge(@(value1) {
      let parser = parserFn(value1)
      Util:pipe([
        parser
        Parser:map(@(value2) { 
          let o = {}
          Obj:set(o, key, value2)
          o
        })
      ])
    })
  }

  @parser(store) {
    store.parser
  }
}

let spaces = Parser:takeWhile(@(value) {
  if (value == " ") { true } else { false }
})

let mfmTagOpen = Parser:token("$[")

let mfmTagName = Parser:takeWhile1(@(value) {
  if (value == " ") { false } else { true }
})

let mfmTagClose = Parser:token("]")

let mfmTagText = Parser:takeWhile1(@(value) {
  if "`$]".incl(value) { false } else { true }
})

let codeToggle = Parser:token("`")

let codeBlockToggle = Parser:token("```")

let codeText = Parser:takeWhile1(@(value) {
  if (value == "`") { false } else { true }
})

let code = Util:pipe([
  ParserStore:create()
  ParserStore:skip(@() { codeToggle })
  ParserStore:store("content", @() { codeText })
  ParserStore:skip(@() { codeToggle })
  ParserStore:parser
  Parser:map(@(store) { ["`" store.content "`"].join() })
])

let codeBlock = Util:pipe([
  ParserStore:create()
  ParserStore:skip(@() { codeBlockToggle })
  ParserStore:store("content", @() { codeText })
  ParserStore:skip(@() { codeBlockToggle })
  ParserStore:parser
  Parser:map(@(store) { ["`" store.content "`"].join() })
])

let mfmTag = Util:pipe([
  ParserStore:create()
  ParserStore:skip(@() { mfmTagOpen })
  ParserStore:skip(@() { mfmTagName })
  ParserStore:skip(@() { spaces })
  ParserStore:store("content", @() { mfmTagContent })
  ParserStore:skip(@() { mfmTagClose })
  ParserStore:parser
  Parser:map(@(store) { store.content })
])

let mfmTagContent = Util:pipe([
  Parser:many(
    Parser:oneOf([
      mfmTagText
      codeBlock
      code
      mfmTag
      Parser:token("`")
      Parser:token("$")
    ])
  )
  Parser:map(@(parts) { parts.join() })
])

let noteText = Parser:takeWhile1(@(value) {
  if "`$".incl(value) { false } else { true }
})

let noteContent = Util:pipe([
  Parser:many(
    Parser:oneOf([
      noteText
      codeBlock
      code
      mfmTag
      Parser:token("`")
      Parser:token("$")
    ])
  )
  Parser:map(@(parts) { parts.join() })
])

@strip(note) {
  if (note.renote == null) {
    let result = noteContent.parse(Stream:of(note.text))

    if result.ok {
      note.text = result.value
    }
  }
  else {
    let result = noteContent.parse(Stream:of(note.renote.text))

    if result.ok {
      note.renote.text = result.value
    }
  }
  
  note
}

@toggleMFM(note) {
	var mutes = Mk:load("mutes")
	if (mutes == null) {
		mutes = [note.id]
		Mk:dialog("MFM disabled for this note" "Reload or go to different page to take effect.")
	} else {
		if mutes.incl(note.id) {
			mutes = mutes.filter(@(x){(x != note.id)})
			Mk:dialog("MFM reenabled for this note" "Reload or go to different page to take effect.")
		} else {
			mutes.push(note.id)
			Mk:dialog("MFM disabled for this note" "Reload or go to different page to take effect.")
		}
	}
	Mk:save("mutes" mutes)
}

@checkMute(note) {
	let mutes = Mk:load("mutes")
	if (mutes != null) {
		if mutes.incl(note.id) {
			note = strip(note)
		}
		if mutes.incl(note.renote.id) {
			note.renote = strip(note.renote)
		}
	}
	return note
}


Plugin:register_note_action("toggle MFM" toggleMFM)
Plugin:register_note_view_interruptor(checkMute)
